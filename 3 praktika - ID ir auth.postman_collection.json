{
	"info": {
		"_postman_id": "ef7a5f82-f439-47a0-a7c6-fe3bbe38f733",
		"name": "3 praktika - ID ir auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45095034"
	},
	"item": [
		{
			"name": "user creation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateValidSecurePassword(length = 16) {",
							"  const lower = \"abcdefghijklmnopqrstuvwxyz\";",
							"  const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
							"  const numbers = \"0123456789\";",
							"  const special = \"!@#$%^&*()-_=+[]{}<>?\";",
							"  const all = lower + upper + numbers + special;",
							"",
							"  let password = \"\";",
							"  password += lower[Math.floor(Math.random() * lower.length)];",
							"  password += upper[Math.floor(Math.random() * upper.length)];",
							"  password += numbers[Math.floor(Math.random() * numbers.length)];",
							"",
							"  for (let i = 3; i < length; i++) {",
							"    password += all[Math.floor(Math.random() * all.length)];",
							"  }",
							"",
							"  password = password.split('').sort(() => 0.5 - Math.random()).join('');",
							"  return password;",
							"}",
							"",
							"// Generate dynamic values",
							"const password = generateValidSecurePassword();",
							"const timestamp = Date.now();",
							"const email = `john.doe.${timestamp}@example.com`;",
							"",
							"// Save to environment variables",
							"pm.environment.set(\"user_email\", email);",
							"pm.environment.set(\"user_password\", password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"const responseData = pm.response.json();",
							"",
							"// Extract values",
							"const userId = responseData.id;",
							"const email = responseData.email;",
							"const firstName = responseData.first_name;",
							"const lastName = responseData.last_name;",
							"const fullName = `${firstName} ${lastName}`;",
							"const password = pm.environment.get(\"user_password\"); // From Pre-request",
							"",
							"// Save to environment variables",
							"pm.environment.set(\"user_id\", userId);",
							"pm.environment.set(\"user_email\", email);",
							"pm.environment.set(\"user_password\", password);",
							"",
							"// Log values to console",
							"console.log(\"User Created:\");",
							"console.log(\"  Name:\", fullName);",
							"console.log(\"  Email:\", email);",
							"console.log(\"  ID:\", userId);",
							"console.log(\"  Password:\", password);",
							"",
							"// Display in Test Results tab",
							"pm.test(\"‚úÖ User created and variables saved\", function () {",
							"  pm.expect(userId).to.be.a(\"string\");",
							"  pm.expect(email).to.include(\"@\");",
							"  pm.expect(firstName).to.be.a(\"string\");",
							"  pm.expect(lastName).to.be.a(\"string\");",
							"});",
							"",
							"// Extra test results output",
							"pm.test(`üë§ Name: ${fullName}`, () => true);",
							"pm.test(`üìß Email: ${email}`, () => true);",
							"pm.test(`üÜî User ID: ${userId}`, () => true);",
							"pm.test(`üîê Password: ${password}`, () => true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/users/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"register"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let json;",
							"",
							"try {",
							"    json = pm.response.json();",
							"} catch (e) {",
							"    console.error(\"‚ùå Failed to parse JSON:\", e);",
							"    return;",
							"}",
							"",
							"console.log(\"Full response body:\", json);",
							"",
							"if (json.access_token) {",
							"    // Save token to environment variable",
							"    pm.environment.set(\"auth_token\", json.access_token);",
							"    console.log(\"‚úÖ Access token saved:\", json.access_token);",
							"",
							"    // Standard test for saving",
							"    pm.test(\"‚úÖ Access token is saved as environment variable\", function () {",
							"        pm.expect(pm.environment.get(\"auth_token\")).to.eql(json.access_token);",
							"    });",
							"",
							"    // Inject the token into the test name for visibility in the Test Results",
							"    const tokenSnippet = json.access_token.substring(0, 50) + \"...\"; // avoid printing full token",
							"    pm.test(\"üîê Access token starts with: \" + tokenSnippet, function () {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"",
							"} else {",
							"    console.warn(\"‚ö†Ô∏è No access token found in response.\");",
							"    pm.test(\"‚ùå No access token in response\", function () {",
							"        pm.expect(json.access_token).to.be.ok;",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS5wcmFjdGljZXNvZnR3YXJldGVzdGluZy5jb20vdXNlcnMvbG9naW4iLCJpYXQiOjE3NDg1MzY0MDAsImV4cCI6MTc0ODUzNjcwMCwibmJmIjoxNzQ4NTM2NDAwLCJqdGkiOiJVRXFCRzN2NDhjUXVDam1jIiwic3ViIjoiMDFqd2VlN2FicXM5NzJqeGI1djdrdzl5eHEiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3Iiwicm9sZSI6InVzZXIifQ.7-8C1xbw2vIDVHGInOs9GVfrybqx9byVOVE66cWqNZk",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/users/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change user info",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Random first names (believable list)",
							"const firstNames = [\"John\", \"Jane\", \"Mike\", \"Emily\", \"Robert\", \"Sarah\", \"David\", \"Linda\", \"James\", \"Jessica\"];",
							"const lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Davis\", \"Miller\", \"Wilson\", \"Moore\", \"Taylor\", \"Anderson\"];",
							"",
							"// Random street names (believable)",
							"const streets = [\"Main St\", \"Oak Ave\", \"Pine Rd\", \"Maple Dr\", \"Elm St\", \"Sunset Blvd\", \"Park Ln\", \"River Rd\", \"Broadway\", \"Highland Ave\"];",
							"",
							"// Random cities and countries (believable)",
							"const cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\", \"San Francisco\", \"Seattle\", \"Miami\", \"Boston\", \"Dallas\"];",
							"const countries = [\"USA\", \"Canada\", \"UK\", \"Australia\", \"Germany\", \"France\", \"Italy\", \"Spain\", \"India\", \"Brazil\"];",
							"",
							"// Helper function to generate a random email",
							"function generateRandomEmail(firstName, lastName) {",
							"    const domains = [\"example.com\", \"mail.com\", \"gmail.com\", \"yahoo.com\", \"outlook.com\"];",
							"    const domain = domains[Math.floor(Math.random() * domains.length)];",
							"    return `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`;",
							"}",
							"",
							"// Helper function to generate random data",
							"function getRandomItemFromList(list) {",
							"    return list[Math.floor(Math.random() * list.length)];",
							"}",
							"",
							"// Generate random user data",
							"const randomFirstName = getRandomItemFromList(firstNames);",
							"const randomLastName = getRandomItemFromList(lastNames);",
							"const randomStreet = getRandomItemFromList(streets);",
							"const randomCity = getRandomItemFromList(cities);",
							"const randomCountry = getRandomItemFromList(countries);",
							"const randomEmail = generateRandomEmail(randomFirstName, randomLastName);",
							"",
							"// Set the generated random values to environment variables",
							"pm.environment.set(\"randomFirstName\", randomFirstName);",
							"pm.environment.set(\"randomLastName\", randomLastName);",
							"pm.environment.set(\"randomEmail\", randomEmail);",
							"pm.environment.set(\"randomStreet\", randomStreet);",
							"pm.environment.set(\"randomCity\", randomCity);",
							"pm.environment.set(\"randomCountry\", randomCountry);",
							"",
							"// Display the generated random values for confirmation",
							"console.log(`Generated user details:`);",
							"console.log(`Name: ${randomFirstName} ${randomLastName}`);",
							"console.log(`Email: ${randomEmail}`);",
							"console.log(`Address: ${randomStreet}, ${randomCity}, ${randomCountry}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const firstName = pm.environment.get(\"randomFirstName\");",
							"const lastName = pm.environment.get(\"randomLastName\");",
							"const email = pm.environment.get(\"randomEmail\");",
							"const street = pm.environment.get(\"randomStreet\");",
							"const city = pm.environment.get(\"randomCity\");",
							"const country = pm.environment.get(\"randomCountry\");",
							"",
							"// Display each field update on a separate test result line",
							"pm.test(\"üë§ First Name: \" + firstName, () => pm.expect(firstName).to.not.be.undefined);",
							"pm.test(\"üë§ Last Name: \" + lastName, () => pm.expect(lastName).to.not.be.undefined);",
							"pm.test(\"üìß Email: \" + email, () => pm.expect(email).to.include(\"@\"));",
							"pm.test(\"üè† Street: \" + street, () => pm.expect(street).to.not.be.undefined);",
							"pm.test(\"üèôÔ∏è City: \" + city, () => pm.expect(city).to.not.be.undefined);",
							"pm.test(\"üåç Country: \" + country, () => pm.expect(country).to.not.be.undefined);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"first_name\": \"{{randomFirstName}}\",\n  \"last_name\": \"{{randomLastName}}\",\n  \"email\": \"{{randomEmail}}\",\n  \"address\": {\n    \"street\": \"{{randomStreet}}\",\n    \"city\": \"{{randomCity}}\",\n    \"country\": \"{{randomCountry}}\"\n  }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/users/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	]
}